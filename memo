フレームワークの要件
・MVCモデルによる役割の分離
・データベースの接続管理
・ログイン状態の管理
・URLと物理的なディレクトリ構造とを切り離すルーティング機能
・CSRF対策

フレームワークの構造
・Request
ユーザーのリクエストを表すクラス。ユーザーがリクエストした際のGETやPOSTパラメーター、URLなどの情報を管理。

・Router
ユーザーがアクセスしてきたURLをRequestクラスから受け取り、どのコントローラを呼び出すかを決定
これにより物理的なディレクトリ構造に縛られないURLの制御を可能にする。

・Response
リクエストに対するレスポンス。
最終的にユーザーへ返すレスポンス情報を管理。

・DbManager
データベースへの接続情報や次に説明するDbRepositoryを管理するクラス

・DbRepository
実際にデータベースへのアクセスを伴う処理を管理するクラス。
実際にはデータベース上のテーブルごとにDbRepositoryクラスの子クラスを作成
今回のフレームワークではモデルに相当。

・Controller
モデルやビューの制御を行うコントローラ。
今回はこのControllerクラスの中にアクションと呼ばれるメソッドを定義

・View
表示を制御するクラス。ViewクラスにHTMLを書くわけではなく、
HTMLが記述されたファイルの読み込みや変数の受け渡しを行う。

・Session
セッションを管理するクラス

・Application
アプリケーション全体を表すクラス
RequestクラスやSessionクラスの初期化、
コントローラの実行などのアプリケーションの全体の流れを管理

・ClassLoader
クラスを定義したファイルを自動的に読み込むためのオートロードという仕組みを管理


ディレクトリ構成
・controllers・・・コントローラを配置
・core・・・フレームワークを構成するクラスを配置
・models・・・モデルを配置
・views・・・ビュー（HTMLファイル）を配置
・web・・・ドキュメントルート

RequestクラスでのURL制御
getBaseUrl()メソッド
関数
rtrim
dirname

getPathInfo（）メソッド
関数
substr
strpos
strlen

ルーティング
Rooterクラス

Responseクラス
HTTPヘッダとHTMLなどのコンテンツを返すのが主な役割。

setContent()メソッド
setStatusCode()メソッド
setHttpHeader()メソッド
send()メソッド

header関数

データベースアクセスとPDO
DbRepositoryクラスの役割

DbManagerクラス
array_merge()関数

current()関数


